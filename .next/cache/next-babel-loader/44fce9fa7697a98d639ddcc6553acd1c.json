{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport matter from 'gray-matter';\nimport ReactMarkdown from 'react-markdown';\nimport Layout from '../../components/Layout';\n\nfunction reformatDate(fullDate) {\n  var date = new Date(fullDate);\n  return date.toDateString().slice(4);\n}\n\nexport default function BlogTemplate(props) {\n  // data from getInitialProps\n  var markdownBody = props.content;\n  var frontmatter = props.data;\n  return __jsx(Layout, {\n    siteTitle: props.siteTitle\n  }, __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"div\", {\n    className: \"block post\"\n  }, __jsx(\"h1\", null, frontmatter.title), __jsx(\"h4\", null, frontmatter.author, \" | \", reformatDate(frontmatter.date)), __jsx(\"div\", null, __jsx(ReactMarkdown, {\n    source: markdownBody\n  })))));\n}\n\nBlogTemplate.getInitialProps = function _callee(context) {\n  var slug, content, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // context contains the query param\n          slug = context.query.slug; // grab the file in the posts dir based on the slug\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(import(\"../../posts/\".concat(slug, \".md\")));\n\n        case 3:\n          content = _context.sent;\n          // also grab the config file so we can pass down siteTitle\n          // const config = await import(`../../data/config.json`)\n          //gray-matter parses the yaml frontmatter from the md body\n          data = matter(content[\"default\"]);\n          return _context.abrupt(\"return\", _objectSpread({}, data));\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}