{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\brock\\\\Desktop\\\\nextjs-site\\\\pages\\\\blog\\\\[slug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport matter from 'gray-matter';\nimport ReactMarkdown from 'react-markdown';\nimport Layout from '../../components/Layout';\nexport default function BlogTemplate(props) {\n  // data from getInitialProps\n  const markdownBody = props.content;\n  const frontmatter = props.data;\n  return __jsx(Layout, {\n    siteTitle: props.siteTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, frontmatter.title), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, __jsx(ReactMarkdown, {\n    source: markdownBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  })))));\n}\n\nBlogTemplate.getInitialProps = async function (context) {\n  // context contains the query param\n  const {\n    slug\n  } = context.query; // grab the file in the posts dir based on the slug\n\n  const content = await import(`../../posts/${slug}.md`); // also grab the config file so we can pass down siteTitle\n  // const config = await import(`../../data/config.json`)\n  //gray-matter parses the yaml frontmatter from the md body\n\n  const data = matter(content.default);\n  return _objectSpread({}, data);\n};","map":{"version":3,"sources":["C:/Users/brock/Desktop/nextjs-site/pages/blog/[slug].js"],"names":["matter","ReactMarkdown","Layout","BlogTemplate","props","markdownBody","content","frontmatter","data","siteTitle","title","getInitialProps","context","slug","query","default"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACxC;AACA,QAAMC,YAAY,GAAGD,KAAK,CAACE,OAA3B;AACA,QAAMC,WAAW,GAAGH,KAAK,CAACI,IAA1B;AACA,SACI,MAAC,MAAD;AAAQ,IAAA,SAAS,EAAEJ,KAAK,CAACK,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKF,WAAW,CAACG,KAAjB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEL,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,CADJ,CADJ,CADJ;AAYH;;AAEDF,YAAY,CAACQ,eAAb,GAA+B,gBAAgBC,OAAhB,EAAyB;AACpD;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWD,OAAO,CAACE,KAAzB,CAFoD,CAGpD;;AACA,QAAMR,OAAO,GAAG,MAAM,OAAQ,eAAcO,IAAK,KAA3B,CAAtB,CAJoD,CAKpD;AACA;AACA;;AACA,QAAML,IAAI,GAAGR,MAAM,CAACM,OAAO,CAACS,OAAT,CAAnB;AACA,2BAEOP,IAFP;AAIH,CAbD","sourcesContent":["import matter from 'gray-matter'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport Layout from '../../components/Layout'\r\n\r\nexport default function BlogTemplate(props) {\r\n    // data from getInitialProps\r\n    const markdownBody = props.content\r\n    const frontmatter = props.data\r\n    return (\r\n        <Layout siteTitle={props.siteTitle}>\r\n            <div className=\"container\">\r\n                <div className=\"block\">\r\n                    <h1>{frontmatter.title}</h1>\r\n                    <div>\r\n                        <ReactMarkdown source={markdownBody} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nBlogTemplate.getInitialProps = async function (context) {\r\n    // context contains the query param\r\n    const { slug } = context.query\r\n    // grab the file in the posts dir based on the slug\r\n    const content = await import(`../../posts/${slug}.md`)\r\n    // also grab the config file so we can pass down siteTitle\r\n    // const config = await import(`../../data/config.json`)\r\n    //gray-matter parses the yaml frontmatter from the md body\r\n    const data = matter(content.default)\r\n    return {\r\n        // siteTitle: config.title,\r\n        ...data,\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}