{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport matter from 'gray-matter';\nimport ReactMarkdown from 'react-markdown';\nimport Layout from '../../components/Layout';\n\nfunction BlogTemplate(props) {\n  function reformatDate(fullDate) {\n    const date = new Date(fullDate);\n    return date.toDateString().slice(4);\n  } // data from getInitialProps\n\n\n  const markdownBody = props.content; // const frontmatter = props.data\n\n  if (!props.data) {\n    const title = '';\n    const author = '';\n    const date = '';\n  }\n\n  if (props.data) {\n    const {\n      title,\n      author,\n      date\n    } = props.data;\n  }\n\n  return __jsx(Layout, {\n    siteTitle: props.siteTitle\n  }, __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"div\", {\n    className: \"block post\"\n  }, __jsx(\"h1\", null, title), __jsx(\"h4\", null, author, \" | \", reformatDate(date)), __jsx(\"div\", null, __jsx(ReactMarkdown, {\n    source: markdownBody\n  })))));\n}\n\nBlogTemplate.getInitialProps = async ctx => {\n  const {\n    slug\n  } = ctx.query;\n\n  if (slug) {\n    const content = await import(`../../posts/${slug}.md`);\n    const data = matter(content.default);\n    return _objectSpread({}, data);\n  }\n\n  return {};\n};\n\nexport default BlogTemplate;","map":null,"metadata":{},"sourceType":"module"}